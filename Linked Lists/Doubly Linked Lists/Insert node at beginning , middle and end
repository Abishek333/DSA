public class practice
{

    Node head;
    Node tail;
    static int size = 0;
    class Node
    {
        Node next;
        Node prev;

        int value;
        Node(int value)
        {
            this.value = value;
            next = null;
            prev = null;
        }
    }


    void print()
    {
        Node temp = head;

        while(temp != null)
        {
            System.out.print(temp.value + " ");

            if(temp.next != null)
            {
                System.out.print(" <-> ");
            }

            temp = temp.next;
        }
    }
    void push(int new_data)
    {
        Node new_node = new Node(new_data);
        if(head == null)
        {
            head = new_node;
            tail = new_node;
            head.prev = null;
            tail.next = null;
        }
        else
        {
            tail.next = new_node;
            new_node.prev = tail;
            tail = new_node;
            tail.next = null;
        }
        size++;
    }

    void insertBeginning(int new_value)
    {
        Node new_node = new Node(new_value);
        if(head == null)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
           Node x = head;
           head = new_node;
           head.next = x;
           head.next.prev = head;
           head.prev = null;
        }
        size++;
    }


    void insertMiddle(int new_value)
    {
        Node new_node = new Node(new_value);
        int pos = (size % 2 == 0) ? (size/2) : (size+1)/2;

        Node curr = null;
        Node temp = head;

        for(int i = 0 ; i < pos ; i++)
        {
            curr = temp;
            temp = temp.next;
        }

        Node x = curr.next;
        curr.next = new_node;
        new_node.next = x;
        new_node.prev = curr;

        size++;

    }


    void insertEnd(int new_value)
    {
        Node new_node = new Node(new_value);

        Node temp = head;
        Node curr = null;

        while(temp != null)
        {
            curr = temp;
            temp = temp.next;
        }

        curr.next = new_node;
        new_node.prev = tail;
        tail = new_node;
        tail.next = null;

    }


    public static void main(String[] args)
    {
        practice p = new practice();

        p.push(1);
        p.push(2);
        p.push(3);
        p.push(4);
        p.push(5);

        p.insertBeginning(10);
        p.insertMiddle(20);
        p.insertEnd(30);


       p.print();

    }
}
