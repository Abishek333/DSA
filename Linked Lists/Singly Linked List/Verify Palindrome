import java.lang.reflect.Array;
import java.util.*;


public class practice {
    Node head;
    Node tail;
    static int size = 0;
    class Node
    {
        Node next = null;
        int value;

        Node(int value)
        {
            this.value = value;
            next = null;
        }
    }


    void push(int new_data)
    {
        Node new_node = new Node(new_data);
        if(head == null)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
            tail.next = new_node;
            tail = new_node;
        }
        size++;
    }

void palindrome()
{
    boolean check = true;
    Node temp1 = head;

    int pos = (size%2 == 0) ? (size/2) : (size+1)/2;

    for(int i = 0 ; i < pos ; i++)
    {
        temp1 = temp1.next;
    }


    Node temp2 = reverse(temp1);

     while(head != null && temp2 != null)
    {
      if(head.value != temp2.value)
      {
          check = false;
          break;
      }
      head = head.next;
      temp2 = temp2.next;
    }

    if(check)
    {
        System.out.println("Palindrome");
    }
    else
    {
        System.out.println("No");
    }
}

public Node reverse(Node temp)
{
    Node curr = temp;
    Node nextNode = null;
    Node prevNode = null;

    while(curr != null)
    {
        nextNode = curr.next;
        curr.next = prevNode;
        prevNode = curr;
        curr = nextNode;
    }

    return prevNode;
}

    void print() {
        Node temp = head;

        while (temp != null)
        {
            System.out.print(temp.value + " ");
            if (temp.next != null) {
                System.out.print("->");
            }
            temp = temp.next;
        }
    }

        public static void main(String[] args)
        {
            practice p = new practice();

            p.push(1);
            p.push(2);
            p.push(3);
            p.push(2);
            p.push(1);
            p.print();

            System.out.println();

            p.palindrome();


        }
}
