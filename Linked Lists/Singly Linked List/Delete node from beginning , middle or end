import java.lang.reflect.Array;
import java.util.*;


public class practice {
    Node head;
    Node tail;
    static int size = 0;
    class Node
    {
        Node next = null;
        int value;

        Node(int value)
        {
            this.value = value;
            next = null;
        }
    }


    void push(int new_data)
    {
        Node new_node = new Node(new_data);
        if(head == null)
        {
            head = new_node;
            tail = new_node;
        }
        else
        {
            tail.next = new_node;
            tail = new_node;
        }
        size++;
    }

    void deleteBeginning()
    {
        head = head.next;
        size--;
    }


    void deleteMiddle()
    {
        int pos = (size % 2 == 0) ? (size/2) : ((size+1)/2);
        Node temp = head;
        Node curr = null;

        for(int i = 0 ; i < pos-1 ; i++)
        {
            curr = temp;
            temp = temp.next;
        }

        curr.next = temp.next;
        temp = null;

        size--;
    }


    void deleteEnd()
    {
        Node temp = head;
        Node curr = null;

        while(temp.next != tail)
        {
            temp = temp.next;
        }

        temp.next = null;
        tail = temp;
        size--;

    }


    void print() {
        Node temp = head;

        while (temp != null) {
            System.out.print(temp.value + " ");
            if (temp.next != null) {
                System.out.print("->");
            }
            temp = temp.next;
        }
    }

        public static void main(String[] args)
        {
            practice p = new practice();

            p.push(1);
            p.push(2);
            p.push(3);
            p.push(4);
            
            p.print();

            p.deleteBeginning();
            p.deleteMiddle();
            p.deleteEnd();
            System.out.println();
            
            p.print();

        }
}
